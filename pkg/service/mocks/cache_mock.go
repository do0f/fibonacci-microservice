// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/fibonacci.go

// Package cache_mock is a generated GoMock package.
package cache_mock

import (
	cache "fibonacci_service/pkg/cache"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetFibonacci mocks base method.
func (m *MockCache) GetFibonacci(count int) (cache.FibNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFibonacci", count)
	ret0, _ := ret[0].(cache.FibNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFibonacci indicates an expected call of GetFibonacci.
func (mr *MockCacheMockRecorder) GetFibonacci(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFibonacci", reflect.TypeOf((*MockCache)(nil).GetFibonacci), count)
}

// SetFibonacci mocks base method.
func (m *MockCache) SetFibonacci(num cache.FibNumber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFibonacci", num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFibonacci indicates an expected call of SetFibonacci.
func (mr *MockCacheMockRecorder) SetFibonacci(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFibonacci", reflect.TypeOf((*MockCache)(nil).SetFibonacci), num)
}
